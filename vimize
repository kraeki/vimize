#!/bin/bash

programm=$0
VZ_PLUGIN_INSTALL_DIR=~/.vim/bundle
VZ_PLUGIN_CONFIG_DIR=~/.vim/config
SOURCE_LIST_FILE=~/.vim/src.list

if [[ ! -d "$VZ_PLUGIN_INSTALL_DIR" ]]; then
  mkdir -p "$VZ_PLUGIN_INSTALL_DIR"
fi
if [[ ! -d "$VZ_PLUGIN_CONFIG_DIR" ]]; then
  mkdir -p "$VZ_PLUGIN_CONFIG_DIR"
fi
if [[ ! -f "$SOURCE_LIST_FILE" ]]; then
  touch "$SOURCE_LIST_FILE"
fi

vz_plugins="`sed 's/#.*$//; /^$/d' "$SOURCE_LIST_FILE"`"

user=`whoami`

cd ~/.vim

# public variables

# checks state of plugin (e.g. 'calendar-vim')
# returns 'i' -> installed
#         '!' -> corrupted
#         ' ' -> not installed
#         'c' -> configured
checkplugin()
{
  ret=""
  plugin=$1
  if [ -d bundle/${plugin} ] && [ -d config/${plugin} ]; then
    # plugin is correctly installed
    ret=$ret"i"
  elif [ -d bundle/${plugin} ] && [ ! -d config/${plugin} ]; then
    # plugin is corrupted ( config is missing )
    ret="!"
  fi
  if [ -f config/${plugin}/vimrc ]; then
    # plugin has custom configuration
    ret=$ret"c"
  fi
  if [ "$ret" == "" ]; then
    ret=$ret" "
  fi
  echo $ret
}

function list_plugins()
{
  for a in $vz_plugins; do
    local plugin=`basename $a | sed 's/.\{4\}$//'`
    echo "  [`checkplugin $plugin`] $plugin"
  done
}

function install( )
{
  local plugin=$1
  for a in $vz_plugins; do
    local p=`basename $a | sed 's/.\{4\}$//'`
    if [[ "$p" == "$plugin" ]]; then
      if [[ ! -d "$VZ_PLUGIN_INSTALL_DIR/$plugin" ]]; then
        # clone repo
        echo clone $a
        ( cd "$VZ_PLUGIN_INSTALL_DIR"; git clone $a )
        ( cd "$VZ_PLUGIN_INSTALL_DIR/$plugin"; git submodule update --init --recursive )
        if [[ ! -f "$VZ_PLUGIN_CONFIG_DIR/install" ]]; then
          echo execute install "$VZ_PLUGIN_CONFIG_DIR/install"
          ( cd "$VZ_PLUGIN_INSTALL_DIR/$plugin"; bash "$VZ_PLUGIN_CONFIG_DIR/$plugin/install" )
        fi
      fi
      if [[ ! -d "$VZ_PLUGIN_CONFIG_DIR/$plugin" ]]; then
        # create config folder
        mkdir -p $VZ_PLUGIN_CONFIG_DIR/$plugin
      fi
      return
    fi
  done
}

case $1 in

  init)
    # create sysmlink
    if [ ! -e ~/.vimrc ]; then
      echo "creating symlink ~/.vimrc => ~/.vim/vimrc"
      ln -s ~/.vim/vimrc ~/.vimrc
    fi

    allplugins="`list_plugins`"
    count=`echo "$allplugins" | grep "\[\]" | wc -l`
    if [[ $count == 0 ]]; then
      echo "all plugins are already installed. use '$programm ls' to list plugins"
      exit
    fi

    echo "plugins to be installed:"
    echo "$allplugins" | grep "\[\]"
    echo -n "Do you want to install all listed plugins? [y/N]: "
    read answer
    if [[ "$answer" != "y" && "$answer" != "Y" ]]; then
      exit 0
    fi
    for a in $vz_plugins; do
      plugin=`basename $a | sed 's/.\{4\}$//'`
      install "$plugin"
    done
    exit 0
    ;;


  add) # add plugin to repo
    if [[ $2 == "" ]]; then
      echo "usage: $programm add <source>"
      exit 1
    fi
    src=$2

    echo $src >> "$SOURCE_LIST_FILE"
    ;;

  ls)
  list_plugins
  exit
  ;;

  edit) # edit custom config of plugin
  shift
  if [ ! -d "config/$1" ]; then
    echo "'config/$1' not found: make sure plugin is installed?"
    exit
  fi
  exec vim config/$1/vimrc
  ;;

  install) # install plugin (git clone repo and setup config)
    if [[ $2 == "" ]]; then
      echo "usage: $programm install <plugin>"
      exit 1
    fi
    install $2
  ;;

  update) # update plugins (git pull --rebase )
  echo "Updating plugins.."
  for a in bundle/*; do
    printf "%-30s: " $a
    cd "$a"
    git pull
    cd ../..
  done
  ;;

  remove) # remove plugin
  shift
  o_purge=0
  o_plugin=""
  for arg in "$@"; do
    case $arg in
      -p|--purge)
       o_purge=1
        ;;
      *)
        o_plugin=$arg
    esac
  done

  if [[ "$o_plugin" == "" ]]; then
    echo "usage: $programm remove [-p|--purge] <plugin>"
    exit 1
  fi

  if [[ -d "$VZ_PLUGIN_INSTALL_DIR/$o_plugin" ]]; then
    rm -rf "$VZ_PLUGIN_INSTALL_DIR/$o_plugin"
    echo deleted plugin $o_plugin
  fi

  if [[ $o_purge == 1 ]] && [[ -f "$VZ_PLUGIN_CONFIG_DIR/$o_plugin/vimrc" ]]; then
    rm -rf "$VZ_PLUGIN_CONFIG_DIR/$o_plugin/vimrc"
    echo deleted config
  fi
  exit
  ;;

  # clone to other computer
  # ./s.sh clone user@192.168.123.114
  clone)
  shift
  if [ -z "$1"  ]; then
    echo "usage: $programm clone user@host (e.g. andreasschmid@192.168.123.114)"
    exit 1
  fi
  ssh $1 'if [ -d ~/.vim ]; then mv ~/.vim ~/.vim.$(date +%Y%m%d%H%M%S); fi; git clone https://github.com/kraeki/vimize.git ~/.vim && ~/.vim/s.sh install'
  ;;

  # pull from remote computer
  # ./s.sh pull user@192.168.123.114
  pull)
  shift
  if [ -z "$1"  ]; then
    echo "usage: $programm pull user@host (e.g. andreasschmid@192.168.123.114)"
    exit 1
  fi
  git clone ssh://$1/~/.vim ~/.vim
  ;;

*)
  echo "that option is not recognized"
  ;;

esac

