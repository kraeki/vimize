#!/bin/bash

programm=$0

plugins="
https://github.com/vim-scripts/taglist.vim.git
https://github.com/vim-scripts/ActionScript-3-Omnicomplete.git
https://github.com/tpope/vim-fugitive.git
https://github.com/vim-scripts/The-NERD-Commenter.git
https://github.com/vim-scripts/Align.git
https://github.com/kien/ctrlp.vim.git
https://github.com/vim-scripts/a.vim.git
https://github.com/vim-scripts/DoxygenToolkit.vim.git
https://github.com/vim-scripts/AutoComplPop.git
https://github.com/nvie/vim-flake8.git
https://github.com/vim-scripts/errormarker.vim.git
https://github.com/Lokaltog/vim-powerline.git
https://github.com/tsaleh/vim-matchit.git
https://github.com/tpope/vim-surround.git
https://github.com/vim-scripts/closetag.vim.git

https://github.com/msanders/snipmate.vim.git
https://github.com/altercation/vim-colors-solarized.git
https://github.com/Lokaltog/vim-easymotion.git

https://github.com/vim-scripts/clang-complete.git
https://github.com/davidhalter/jedi-vim.git
"
# Info:
# clang-complete: aptitude install clang
# jedi-vim: pip install jedi


#https://github.com/tomtom/tlib_vim.git
#https://github.com/MarcWeber/vim-addon-mw-utils.git
#https://github.com/garbas/vim-snipmate.git

#https://github.com/hotoo/calendar-vim.git
#https://github.com/scrooloose/nerdtree.git
#https://github.com/vim-scripts/ActionScript-3-Omnicomplete.git
#https://github.com/MarcWeber/vim-addon-local-vimrc.git
#https://github.com/vim-scripts/DoxygenToolkit.vim.git

#https://github.com/vim-scripts/indentpython.vim.git

user=`whoami`

cd ~/.vim

# public variables

# checks state of plugin (e.g. 'calendar-vim')
# returns 'i' -> installed
#         '!' -> corrupted
#         ' ' -> not installed
#         'c' -> configured
checkplugin()
{
  ret=""
  plugin=$1
  if [ -d bundle/${plugin} ] && [ -d config/${plugin} ]; then
    # plugin is correctly installed
    ret=$ret"i"
  elif [ -d bundle/${plugin} ] && [ ! -d config/${plugin} ]; then
    # plugin is corrupted ( config is missing )
    ret="!"
  fi
  if [ -f config/${plugin}/vimrc ]; then
    # plugin has custom configuration
    ret=$ret"c"
  fi
  if [ "$ret" == "" ]; then
    ret=$ret" "
  fi
  echo $ret
}

function list_plugins()
{
  for a in $plugins; do
    plugin=`basename $a | sed 's/.\{4\}$//'`
    echo "  [`checkplugin $plugin`] $plugin"
  done
}

case $1 in

  # show all available plugins
  ls)
  list_plugins
  exit
  ;;

  # edit custom config of a plugin
  edit)
  shift
  if [ ! -d "config/$1" ]; then
    echo "'config/$1' not found: make sure plugin is installed?"
    exit
  fi
  exec vim config/$1/vimrc
  ;;

  # git clone repo and setup config
  install)
  if [ ! -d bundle]; then
    mkdir bundle
  fi
  function install( )
  {
    local plugin=$1
    if [ ! -d bundle/$plugin ]; then
      # clone repo
      echo clone $a
      cd bundle
      git clone $a
      cd -
      # create config folder
      mkdir -p config/$plugin
    fi
  }

  # install sysmlink
  if [ ! -e ~/.vimrc ]; then
    ln -s ~/.vim/vimrc ~/.vimrc
  fi
  # install all plugin
  if [[ $2 == "-a" ]]; then
    allplugins="`list_plugins`"

    count=`echo "$allplugins" | grep "\[\]" | wc -l`
    if [[ $count == 0 ]]; then
      echo "all plugins are already installed. use '$programm ls' to list plugins"
      exit
    fi

    echo "installing plugins ..."
    echo "$allplugins" | grep "\[\]"

    echo -n "Do you want to install all listed plugins? [y/N]: "
    read answer
    echo "asdf: $answer"
    if [[ "$answer" != "y" && "$answer" != "Y" ]]; then
      exit 0
    fi
    for a in $plugins; do
      plugin=`basename $a | sed 's/.\{4\}$//'`
      install "$plugin"
    done
  # install one specific plugin
  else
    if [[ $2 == "" ]]; then
      echo "usage: $programm install <plugin>"
      exit 1
    fi
    install $2
  fi
  ;;

  # update plugins
  update)
  echo "Updating plugins.."
  for a in bundle/*; do
    printf "%-30s: " $a
    cd "$a"
    git pull
    cd ../..
  done
  ;;

  # remove plugin
  remove)
  plugin=$2
  if [ -d bundle/$plugin ]; then
    echo remove "bundle/$plugin"
    rm -rf bundle/$plugin
  fi
  exit
  ;;

  # remove plugin inclusive config
  purge)
  plugin=$2
  if [ -d bundle/$plugin ]; then
    rm -rf bundle/$plugin
    echo removed "bundle/$plugin"
    rm -rf config/$plugin
    echo removed config "config/$plugin"
  fi
  exit
  ;;

  # clone to other computer
  # ./s.sh clone user@192.168.123.114
  clone)
  shift
  if [ -z "$1"  ]; then
    echo Usage: `basename $programm` clone user@host "(e.g. andreasschmid@192.168.123.114)"
    exit 1
  fi
  ssh $1 'if [ -d ~/.vim ]; then mv ~/.vim ~/.vim.$(date +%Y%m%d%H%M%S); fi; git clone https://github.com/kraeki/vimize.git ~/.vim && ~/.vim/s.sh install'
  ;;

  # pull from remote computer
  # ./s.sh pull user@192.168.123.114
  pull)
  shift
  if [ -z "$1"  ]; then
    echo Usage: `basename $programm` pull user@host "(e.g. andreasschmid@192.168.123.114)"
    exit 1
  fi
  git clone ssh://$1/~/.vim ~/.vim
  ;;

*)
  echo "That option is not recognized"
  ;;

esac

